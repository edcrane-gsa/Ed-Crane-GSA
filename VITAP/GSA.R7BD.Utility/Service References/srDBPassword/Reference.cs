//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1022
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace GSA.R7BD.Utility.srDBPassword {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="srDBPassword.IService")]
    public interface IService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetData", ReplyAction="http://tempuri.org/IService/GetDataResponse")]
        string GetData(string UserID, string DatabaseName, string AuthrizationString);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/getErrorDetails", ReplyAction="http://tempuri.org/IService/getErrorDetailsResponse")]
        string getErrorDetails();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/AESDecryptWebM", ReplyAction="http://tempuri.org/IService/AESDecryptWebMResponse")]
        string AESDecryptWebM(string AuthrizationString);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/AESDecrypt", ReplyAction="http://tempuri.org/IService/AESDecryptResponse")]
        string AESDecrypt(string FilePath, string AuthrizationString);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/AESEncryptWebM", ReplyAction="http://tempuri.org/IService/AESEncryptWebMResponse")]
        bool AESEncryptWebM(string XMLString, string AuthrizationString);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/AESEncrypt", ReplyAction="http://tempuri.org/IService/AESEncryptResponse")]
        bool AESEncrypt(string FilePath, string XMLString, string AuthrizationString);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IServiceChannel : GSA.R7BD.Utility.srDBPassword.IService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ServiceClient : System.ServiceModel.ClientBase<GSA.R7BD.Utility.srDBPassword.IService>, GSA.R7BD.Utility.srDBPassword.IService {
        
        public ServiceClient() {
        }
        
        public ServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public string GetData(string UserID, string DatabaseName, string AuthrizationString) {
            return base.Channel.GetData(UserID, DatabaseName, AuthrizationString);
        }
        
        public string getErrorDetails() {
            return base.Channel.getErrorDetails();
        }
        
        public string AESDecryptWebM(string AuthrizationString) {
            return base.Channel.AESDecryptWebM(AuthrizationString);
        }
        
        public string AESDecrypt(string FilePath, string AuthrizationString) {
            return base.Channel.AESDecrypt(FilePath, AuthrizationString);
        }
        
        public bool AESEncryptWebM(string XMLString, string AuthrizationString) {
            return base.Channel.AESEncryptWebM(XMLString, AuthrizationString);
        }
        
        public bool AESEncrypt(string FilePath, string XMLString, string AuthrizationString) {
            return base.Channel.AESEncrypt(FilePath, XMLString, AuthrizationString);
        }
    }
}
